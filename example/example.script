local TINT_GREEN = vmath.vector4(0.3, 0.9, 0.3, 1)
local TINT_RED = vmath.vector4(0.9, 0.3, 0.3, 1)

local function equal_str(actual, expected, label_url)
    if actual == expected then
        label.set_text(label_url, tostring(actual) .. " ==\n" .. tostring(expected))
        go.set(label_url, "color", TINT_GREEN)
    else
        label.set_text(label_url, tostring(actual) .. " ~=\n" .. tostring(expected))
        go.set(label_url, "color", TINT_RED)
    end
end

function init(self)  
    msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

    print("Base64 'world' encoded is", savetable.encode_base64("world"))
    print("Empty table {} is", savetable.encode_base64(savetable.serialize({})))

    local t = { hello = "world" }
    local s = savetable.encode_base64(savetable.serialize(t, 1024))
    local t2 = savetable.deserialize(savetable.decode_base64(s))

    equal_str(s, "SERUQgMAAAABAAQEBQAAAGhlbGxvBQAAAHdvcmxk", "/tests#test1")
    equal_str(t.hello, t2.hello, "/tests#test2")

    local big_table = {}
    for i = 1, 50000 do
        table.insert(big_table, { data = i })
    end
    local s = savetable.serialize(big_table, 4 * 1024 * 1024)
    print("Size", #s)
    local t2 = savetable.deserialize(s)
    for i = 1, 50000 do
        assert(t2[i].data == i)
    end
    print("OK")
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
end